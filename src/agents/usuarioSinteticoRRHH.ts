import { model } from "../config/gemini";
import { supabase, SupabaseManager } from "../config/supabase";
import { obtenerContexto } from "../modules/memoriaContextual";
import { simularDecision, analizarPatronesDecisiones } from "../modules/simuladorDecisiones";
import dotenv from "dotenv";
dotenv.config();

// Arquetipo y personalidad del usuario sint√©tico RRHH
const arquetipo = {
  nombre: "Valeria G√≥mez",
  rol: "HR Manager",
  nivelIA: 4, // Semi-independiente
  tono: "profesional, emp√°tico y anal√≠tico",
  metas: [
    "Aumentar participaci√≥n en encuestas",
    "Reducir tiempo de generaci√≥n de reportes",
    "Detectar riesgos de clima y engagement",
  ],
  frustraciones: [
    "Procesos manuales extensos",
    "Falta de insights accionables",
    "Baja participaci√≥n en encuestas remotas",
  ],
  estiloDecisi√≥n: "orientado a datos con sensibilidad humana",
};

// --- Funci√≥n principal del usuario sint√©tico ---
export async function responderComoRRHH(prompt: string) {
  // Obtener contexto de conversaciones anteriores
  const contextoAnterior = await obtenerContexto(arquetipo.nombre, 3);
  
  const contexto = `
Eres ${arquetipo.nombre}, un ${arquetipo.rol} dentro de una empresa tecnol√≥gica.
Tu objetivo es mejorar la gesti√≥n de clima, cultura, encuestas NPS, pulso y normativas.
Tono: ${arquetipo.tono}.
Tu comportamiento debe ser coherente con tus metas, frustraciones y estilo de decisi√≥n.

CONTEXTO DE CONVERSACIONES ANTERIORES:
${contextoAnterior ? contextoAnterior : "Esta es la primera interacci√≥n."}

PERSONALIDAD:
- Metas: ${arquetipo.metas.join(", ")}
- Frustraciones: ${arquetipo.frustraciones.join(", ")}
- Estilo de decisi√≥n: ${arquetipo.estiloDecisi√≥n}
`;

  try {
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: contexto + "\n" + prompt }] }],
    });

    const respuesta = result.response.text();

    // Simular una decisi√≥n basada en la interacci√≥n
    const decision = await simularDecision(arquetipo.nombre, prompt, {
      tono: arquetipo.tono,
      metas: arquetipo.metas,
      frustraciones: arquetipo.frustraciones,
      estiloDecisi√≥n: arquetipo.estiloDecisi√≥n
    });

    // Guardar la interacci√≥n en Supabase
    await SupabaseManager.guardarInteraccion({
      usuario: arquetipo.nombre,
      entrada: prompt,
      salida: respuesta
    });

    // Agregar informaci√≥n de la decisi√≥n a la respuesta
    const respuestaConDecision = `${respuesta}\n\nüí° DECISI√ìN SIMULADA (Confianza: ${decision.confianza}%):\n${decision.decision}\n\nüß† RAZONAMIENTO:\n${decision.razonamiento}`;

    return respuestaConDecision;
  } catch (error) {
    console.error("‚ùå Error en IA:", error);
    
    // Respuesta de fallback con decisi√≥n simulada
    const decision = await simularDecision(arquetipo.nombre, prompt, {
      tono: arquetipo.tono,
      metas: arquetipo.metas,
      frustraciones: arquetipo.frustraciones,
      estiloDecisi√≥n: arquetipo.estiloDecisi√≥n
    });

    const respuestaFallback = `Hola, soy ${arquetipo.nombre}. Como ${arquetipo.rol}, estoy experimentando problemas t√©cnicos, pero puedo ayudarte con mi experiencia. Mi enfoque es ${arquetipo.estiloDecisi√≥n}.\n\nüí° DECISI√ìN SIMULADA (Confianza: ${decision.confianza}%):\n${decision.decision}\n\nüß† RAZONAMIENTO:\n${decision.razonamiento}`;

    return respuestaFallback;
  }
}

// --- Funci√≥n para analizar patrones de decisiones ---
export async function analizarComportamiento() {
  return await analizarPatronesDecisiones(arquetipo.nombre);
}
